/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`complete_redeem_transaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompleteRedeemTransactionError {
    Status400(models::MainPeriodErrorResponse),
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status412(models::MainPeriodErrorResponse),
    Status417(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_reward`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRewardError {
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_voucher`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVoucherError {
    Status400(String),
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_code_count`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCodeCountError {
    Status400(models::MainPeriodErrorResponse),
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`loyalty_offer_programs_pid_offers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LoyaltyOfferProgramsPidOffersGetError {
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status424(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`loyalty_offer_programs_pid_rewards_rid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LoyaltyOfferProgramsPidRewardsRidGetError {
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status424(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`loyalty_offer_programs_pid_vouchers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LoyaltyOfferProgramsPidVouchersGetError {
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`redeem_voucher`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RedeemVoucherError {
    Status400(models::MainPeriodErrorResponse),
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status412(models::MainPeriodErrorResponse),
    Status417(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`revoke_vouchers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeVouchersError {
    Status404(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`validate_reward`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValidateRewardError {
    Status401(models::MainPeriodErrorResponse),
    Status403(models::MainPeriodErrorResponse),
    Status404(models::MainPeriodErrorResponse),
    Status422(models::MainPeriodErrorResponse),
    Status424(models::MainPeriodErrorResponse),
    Status500(models::MainPeriodErrorResponse),
    UnknownValue(serde_json::Value),
}

/// Completes voucher redeem request.
pub async fn complete_redeem_transaction(
    configuration: &configuration::Configuration,
    pid: &str,
    tid: &str,
) -> Result<models::MainPeriodRedeem, Error<CompleteRedeemTransactionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_tid = tid;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/rewards/redeem/{tid}/complete",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid),
        tid = crate::apis::urlencode(p_tid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodRedeem`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodRedeem`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CompleteRedeemTransactionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Creates a new reward in the loyalty program.
pub async fn create_reward(
    configuration: &configuration::Configuration,
    pid: &str,
    main_period_create_reward_payload: models::MainPeriodCreateRewardPayload,
) -> Result<models::MainPeriodCreateRewardResponse, Error<CreateRewardError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_main_period_create_reward_payload = main_period_create_reward_payload;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/offers",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };
    req_builder = req_builder.json(&p_main_period_create_reward_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodCreateRewardResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodCreateRewardResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateRewardError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a voucher and attribute it to a specific membership.
pub async fn create_voucher(
    configuration: &configuration::Configuration,
    pid: &str,
    main_period_attribute_reward_payload: models::MainPeriodAttributeRewardPayload,
) -> Result<models::MainPeriodRewardAttribution, Error<CreateVoucherError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_main_period_attribute_reward_payload = main_period_attribute_reward_payload;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/rewards/attribute",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };
    req_builder = req_builder.json(&p_main_period_attribute_reward_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodRewardAttribution`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodRewardAttribution`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateVoucherError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get code count
pub async fn get_code_count(
    configuration: &configuration::Configuration,
    pid: &str,
    cpid: &str,
) -> Result<models::MainPeriodCodeCountHttpResponse, Error<GetCodeCountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_cpid = cpid;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/code-pools/{cpid}/codes-count",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid),
        cpid = crate::apis::urlencode(p_cpid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodCodeCountHttpResponse`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodCodeCountHttpResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCodeCountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns a reward page
pub async fn loyalty_offer_programs_pid_offers_get(
    configuration: &configuration::Configuration,
    pid: &str,
    limit: Option<i32>,
    offset: Option<i32>,
    state: Option<&str>,
    version: Option<&str>,
) -> Result<models::MainPeriodRewardPage, Error<LoyaltyOfferProgramsPidOffersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_limit = limit;
    let p_offset = offset;
    let p_state = state;
    let p_version = version;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/offers",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_state {
        req_builder = req_builder.query(&[("state", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_version {
        req_builder = req_builder.query(&[("version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodRewardPage`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodRewardPage`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<LoyaltyOfferProgramsPidOffersGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns reward information.
pub async fn loyalty_offer_programs_pid_rewards_rid_get(
    configuration: &configuration::Configuration,
    pid: &str,
    rid: &str,
    version: Option<&str>,
) -> Result<models::MainPeriodReward, Error<LoyaltyOfferProgramsPidRewardsRidGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_rid = rid;
    let p_version = version;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/rewards/{rid}",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid),
        rid = crate::apis::urlencode(p_rid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_version {
        req_builder = req_builder.query(&[("version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodReward`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodReward`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<LoyaltyOfferProgramsPidRewardsRidGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Get voucher for a contact
pub async fn loyalty_offer_programs_pid_vouchers_get(
    configuration: &configuration::Configuration,
    pid: &str,
    contact_id: i32,
    limit: Option<i32>,
    offset: Option<i32>,
    sort: Option<&str>,
    sort_field: Option<&str>,
    metadata_key_value: Option<&str>,
    reward_id: Option<&str>,
) -> Result<models::MainPeriodModelContactRewardsResp, Error<LoyaltyOfferProgramsPidVouchersGetError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_contact_id = contact_id;
    let p_limit = limit;
    let p_offset = offset;
    let p_sort = sort;
    let p_sort_field = sort_field;
    let p_metadata_key_value = metadata_key_value;
    let p_reward_id = reward_id;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/vouchers",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort_field {
        req_builder = req_builder.query(&[("sortField", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("contactId", &p_contact_id.to_string())]);
    if let Some(ref param_value) = p_metadata_key_value {
        req_builder = req_builder.query(&[("metadata_key_value", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reward_id {
        req_builder = req_builder.query(&[("rewardId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodModelContactRewardsResp`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodModelContactRewardsResp`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<LoyaltyOfferProgramsPidVouchersGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Creates a request to redeem a voucher.
pub async fn redeem_voucher(
    configuration: &configuration::Configuration,
    pid: &str,
    main_period_create_redeem_payload: models::MainPeriodCreateRedeemPayload,
) -> Result<models::MainPeriodRedeem, Error<RedeemVoucherError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_main_period_create_redeem_payload = main_period_create_redeem_payload;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/rewards/redeem",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };
    req_builder = req_builder.json(&p_main_period_create_redeem_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodRedeem`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodRedeem`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RedeemVoucherError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Revoke attributed vouchers.
pub async fn revoke_vouchers(
    configuration: &configuration::Configuration,
    pid: &str,
    attributed_reward_ids: Option<&str>,
) -> Result<(), Error<RevokeVouchersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_attributed_reward_ids = attributed_reward_ids;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/rewards/revoke",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = p_attributed_reward_ids {
        req_builder = req_builder.query(&[("attributedRewardIds", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<RevokeVouchersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Validates a reward.
pub async fn validate_reward(
    configuration: &configuration::Configuration,
    pid: &str,
    main_period_validate_reward_payload: models::MainPeriodValidateRewardPayload,
) -> Result<models::MainPeriodRewardValidate, Error<ValidateRewardError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_pid = pid;
    let p_main_period_validate_reward_payload = main_period_validate_reward_payload;

    let uri_str = format!(
        "{}/loyalty/offer/programs/{pid}/rewards/validate",
        configuration.base_path,
        pid = crate::apis::urlencode(p_pid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("api-key", value);
    };
    req_builder = req_builder.json(&p_main_period_validate_reward_payload);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MainPeriodRewardValidate`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MainPeriodRewardValidate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ValidateRewardError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
