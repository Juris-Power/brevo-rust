/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateUpdateProduct {
    /// Product ID for which you requested the details
    #[serde(rename = "id")]
    pub id: String,
    /// Mandatory in case of creation**. Name of the product for which you requested the details
    #[serde(rename = "name")]
    pub name: String,
    /// URL to the product
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Absolute URL to the cover image of the product
    #[serde(rename = "imageUrl", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    /// Product identifier from the shop
    #[serde(rename = "sku", skip_serializing_if = "Option::is_none")]
    pub sku: Option<String>,
    /// Price of the product
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f32>,
    /// Category ID-s of the product
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    /// Parent product id of the product
    #[serde(rename = "parentId", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    /// Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 20.
    #[serde(rename = "metaInfo", skip_serializing_if = "Option::is_none")]
    pub meta_info:
        Option<std::collections::HashMap<String, models::GetContactInfoIdentifierParameter>>,
    /// Facilitate to update the existing category in the same request (updateEnabled = true)
    #[serde(rename = "updateEnabled", skip_serializing_if = "Option::is_none")]
    pub update_enabled: Option<bool>,
    /// UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop's database
    #[serde(rename = "deletedAt", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
    /// product deleted from the shop's database
    #[serde(rename = "isDeleted", skip_serializing_if = "Option::is_none")]
    pub is_deleted: Option<bool>,
    /// Current stock value of the product from the shop's database
    #[serde(rename = "stock", skip_serializing_if = "Option::is_none")]
    pub stock: Option<f64>,
}

impl CreateUpdateProduct {
    pub fn new(id: String, name: String) -> CreateUpdateProduct {
        CreateUpdateProduct {
            id,
            name,
            url: None,
            image_url: None,
            sku: None,
            price: None,
            categories: None,
            parent_id: None,
            meta_info: None,
            update_enabled: None,
            deleted_at: None,
            is_deleted: None,
            stock: None,
        }
    }
}
