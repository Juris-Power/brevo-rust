/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RequestContactExport {
    /// List of all the attributes that you want to export. **These attributes must be present in your contact database. It is required if exportMandatoryAttributes is set false. ** For example: **['fname', 'lname', 'email']**
    #[serde(rename = "exportAttributes", skip_serializing_if = "Option::is_none")]
    pub export_attributes: Option<Vec<String>>,
    #[serde(rename = "customContactFilter")]
    pub custom_contact_filter: Box<models::RequestContactExportCustomContactFilter>,
    /// Webhook that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
    #[serde(rename = "notifyUrl", skip_serializing_if = "Option::is_none")]
    pub notify_url: Option<String>,
    /// To avoid generating the email notification upon contact export, pass **true**
    #[serde(
        rename = "disableNotification",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_notification: Option<bool>,
    /// To export mandatory attributes like EMAIL, ADDED_TIME, MODIFIED_TIME
    #[serde(
        rename = "exportMandatoryAttributes",
        skip_serializing_if = "Option::is_none"
    )]
    pub export_mandatory_attributes: Option<bool>,
    /// Export subscription status of contacts for email & sms marketting. Pass email_marketing to obtain the marketing email subscription status & sms_marketing to retrieve the marketing SMS status of the contact.
    #[serde(
        rename = "exportSubscriptionStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub export_subscription_status: Option<Vec<String>>,
    /// Export metadata of contacts such as _listIds, ADDED_TIME, MODIFIED_TIME.
    #[serde(rename = "exportMetadata", skip_serializing_if = "Option::is_none")]
    pub export_metadata: Option<Vec<String>>,
}

impl RequestContactExport {
    pub fn new(
        custom_contact_filter: models::RequestContactExportCustomContactFilter,
    ) -> RequestContactExport {
        RequestContactExport {
            export_attributes: None,
            custom_contact_filter: Box::new(custom_contact_filter),
            notify_url: None,
            disable_notification: None,
            export_mandatory_attributes: None,
            export_subscription_status: None,
            export_metadata: None,
        }
    }
}
