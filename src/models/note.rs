/*
 * Brevo API
 *
 * Brevo provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/brevo  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   | 422  | Error. Unprocessable Entity |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@brevo.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Note : Note Details
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Note {
    /// Unique note Id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Text content of a note
    #[serde(rename = "text")]
    pub text: String,
    /// Contact ids linked to a note
    #[serde(rename = "contactIds", skip_serializing_if = "Option::is_none")]
    pub contact_ids: Option<Vec<i32>>,
    /// Deal ids linked to a note
    #[serde(rename = "dealIds", skip_serializing_if = "Option::is_none")]
    pub deal_ids: Option<Vec<String>>,
    /// Account details of user which created the note
    #[serde(rename = "authorId", skip_serializing_if = "Option::is_none")]
    pub author_id: Option<serde_json::Value>,
    /// Note created date/time
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Note updated date/time
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Note pinned date/time
    #[serde(rename = "pinnedAt", skip_serializing_if = "Option::is_none")]
    pub pinned_at: Option<String>,
}

impl Note {
    /// Note Details
    pub fn new(text: String) -> Note {
        Note {
            id: None,
            text,
            contact_ids: None,
            deal_ids: None,
            author_id: None,
            created_at: None,
            updated_at: None,
            pinned_at: None,
        }
    }
}
